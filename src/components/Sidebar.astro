---
const pages = await Promise.all(
	(await Astro.glob("pages/*.md"))
		.sort((a, b) => a.frontmatter.order - b.frontmatter.order)
		.map(async ({ getHeadings, url }) => {
			return {
				headings: getHeadings(),
				url,
				active: Astro.url.pathname.split(".")[0] === (url || "/"),
			};
		}),
);
---

<input type="checkbox" id="sidebar" />
<aside>
	<nav>
		<label for="sidebar">
			<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6Z" fill="currentColor"></path>
				<path d="M2 12.0322C2 11.4799 2.44772 11.0322 3 11.0322H21C21.5523 11.0322 22 11.4799 22 12.0322C22 12.5845 21.5523 13.0322 21 13.0322H3C2.44772 13.0322 2 12.5845 2 12.0322Z" fill="currentColor"></path>
				<path d="M3 17.0645C2.44772 17.0645 2 17.5122 2 18.0645C2 18.6167 2.44772 19.0645 3 19.0645H21C21.5523 19.0645 22 18.6167 22 18.0645C22 17.5122 21.5523 17.0645 21 17.0645H3Z" fill="currentColor"></path>
			</svg>
		</label>
		<h2><a href="/">dreamland</a></h2>
		{
			pages.map(({ url, headings: [title, ...headings], active }) => (
				<>
					<a href={url || "/"} class:list={[{ active }]}>
						{title.text}
					</a>
					{active &&
						headings
							.filter((heading) => heading.depth == 2)
							.map((heading) => (
								<a href={url + "#" + heading.slug} class="sub">
									{heading.text}
								</a>
							))}
				</>
			))
		}
	</nav>
</aside>

<style>
	input {
		display: block;
		position: fixed;
		appearance: none;
		z-index: 1;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		background-color: black;
		opacity: 0;
		margin: 0;
		transition: opacity 0.3s ease;
		pointer-events: none;
		@media (max-width: 64rem) {
			&:checked {
				opacity: 0.5;
				pointer-events: all;
			}
		}
	}
	label {
		visibility: hidden;
		position: absolute;
		top: 0.5rem;
		left: 100%;
		transform: translateX(0.5rem);
		width: 2.5rem;
		height: 2.5rem;
		border: thin solid var(--bd);
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 100%;
		user-select: none;
		background-color: var(--bg);
		cursor: pointer;
		color: #ddd;
		@media (max-width: 64rem) {
			visibility: visible;
		}
	}
	aside {
		z-index: 1;
		width: 14rem;
		height: 100vh;
		flex-shrink: 0;
		@media (max-width: 64rem) {
			position: absolute;
		}
	}
	nav {
		display: flex;
		flex-direction: column;
		width: inherit;
		border-right: thin solid var(--bd);
		padding-left: 1rem;
		margin: 12px 0;
		position: fixed;
		background-color: var(--bg);
		top: 0;
		bottom: 0;
		@media (max-width: 64rem) {
			margin: 0;
			right: 100%;
			transition: transform 0.3s ease;
			input:checked + aside & {
				transform: translateX(100%);
			}
		}
		a {
			color: currentColor;
			text-decoration: none;
			position: relative;
			&.sub {
				margin-left: 0.75rem;
				border-left: thin solid var(--bd);
			}
			&.active {
				color: white;
				font-weight: 500;
				&::after {
					content: "";
					position: absolute;
					width: 0.7rem;
					height: 0.7rem;
					background: linear-gradient(45deg, var(--bg) 51%, transparent 51%);
					background-clip: content-box;
					border: thin solid var(--bd);
					border-top: thin solid transparent;
					border-right: thin solid transparent;
					top: 50%;
					right: -1px;
					transform: translate(50%, -50%) rotate(45deg);
					view-transition-name: pointer;
				}
			}
		}
		> a {
			padding: 0.25rem 0;
			padding-left: 0.75rem;
			color: #bbb;
			&:hover {
				text-decoration: underline;
			}
		}
	}
</style>
